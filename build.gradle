/*
 * Copyright 2024 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'

apply from: "${scripts_url}/${scripts_branch}/build-quality.gradle"
apply from: "${scripts_url}/${scripts_branch}/release-commons.gradle"
apply from: "${scripts_url}/${scripts_branch}/signing.gradle"
apply from: "${scripts_url}/${scripts_branch}/jacoco.gradle"

project.ext.limits = [
        'instruction': 70,
        'branch'     : 53,
        'line'       : 75,
        'complexity' : 60,
        'method'     : 65,
        'class'      : 83
]

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
    api "com.epam.reportportal:client-java:${client_version}"
    compileOnly "com.intuit.karate:karate-core:${karate_version}"
    implementation "org.slf4j:slf4j-api:${slf4j_api_version}"

    testImplementation "com.intuit.karate:karate-core:${karate_version}"
    testImplementation "com.epam.reportportal:logger-java-logback:${logger_version}"
    testImplementation "com.epam.reportportal:agent-java-test-utils:${test_utils_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_version}"
    testImplementation "org.mockito:mockito-core:${mockito_version}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockito_version}"
    testImplementation "org.hamcrest:hamcrest-core:${hamcrest_version}"
    testImplementation "com.squareup.okhttp3:okhttp:${okhttp_version}"
}

test {
    outputs.upToDateWhen { return false }
    useJUnitPlatform()
    forkEvery(1)
    maxParallelForks(1)
    doFirst {
        def weaver = configurations.testRuntimeClasspath.find { it.name.contains("aspectjweaver") }
        jvmArgs += "-javaagent:$weaver"
        jvmArgs += ['--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                    '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED',
                    '--add-opens', 'java.base/java.util=ALL-UNNAMED',
                    '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED']
    }
    environment "AGENT_NO_ANALYTICS", "1"
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

wrapper {
    gradleVersion = "${gradle_version}"
}

processResources {
    filesMatching('agent.properties') {
        expand(project.properties)
    }
}

release {
    git {
        requireBranch = 'main'
    }
}

build.dependsOn jacocoTestReport
